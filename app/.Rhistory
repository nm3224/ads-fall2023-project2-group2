} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
# generate data after applying the filters for statistics tab
generate_summary_data_stat <- function(state_names, disaster_names, dam_per, apamt_per) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
filter(total_damage_sum >= quantile(filtered_data$total_damage_sum,dam_per/100)) %>%
filter(total_approved_amount_sum >= quantile(filtered_data$total_approved_amount_sum,apamt_per/100)) %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
IncidentType = incidentType,
.groups = 'drop'
)
return(summary_data)
}
data$incidentType
shiny('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shiny('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_summary <- read.csv("FemaWebDisasterSummaries.csv")
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_summary <- disaster_summary[,-c(9,10,12:14)]
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
disaster_owner <- read.csv("HousingAssistanceOwners.csv")
disaster_renter <- read.csv("HousingAssistanceRenters.csv")
disaster_renter <- read.csv("HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#Most prevalent disaster by state
top_disaster_state <- disaster_declaration%>%group_by(stateName, incidentType)%>%summarize(Frequency=n())%>%arrange(stateName, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
state_boundaries <- read_sf("state_boundaries/state_boundaries/cb_2019_us_state_5m.shp")
library(sf)
state_boundaries <- read_sf("state_boundaries/state_boundaries/cb_2019_us_state_5m.shp")
state_boundaries <- st_transform(state_boundaries, crs = "+proj=longlat +datum=WGS84")
merged_data <- merge(state_boundaries, disaster_declaration, by.x = "NAME", by.y = "stateName", all.x = FALSE)
disaster_freq_state <- disaster_declaration%>%group_by(stateName)%>%summarize(Frequency=n())
shinyAppDir("D:/rscript")
shinyAppDir("D:/rscript")
shinyAppDir("D:/rscript")
library(shiny)
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
help("plot_ly")
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
x1 = c(1,2,3)
x2 = c(4,5,6)
y1 <- c(1,9,10)
y2 <- c(8,7,2)
ggplot(aes(x = c(x1,x2),y = c(y1,y2)))
df = data.frame(x1,x2,y1,y2)
df
ggplot(data = df,aes(x = c(x1,x2),y = c(y1,y2)))
ggplot(data = df,aes(x = x1,y = ecdf(x1)))
ecdf(df$x1)
ecdf(data$total_damage_sum)
pathfile <- '../data/HousingAssistanceOwners.csv'
owner_data <- read.csv(pathfile)
pathfile_2 <- '../data/HousingAssistanceRenters.csv'
renter_data <- read.csv(pathfile_2)
pathfile_3 <- '../data/owners_summary_state_groupby.csv'
state_incident_data <- read.csv(pathfile_3)
# install.packages('package') for each package listed.
#setwd('Desktop/GitHub/ads-fall2023-project2-group2/doc/')
library(dplyr)
library(stats)
library(ggplot2)
library(ggrepel)
library(udpipe)
library(plotly)
library(plyr)
pathfile <- '../data/HousingAssistanceOwners.csv'
owner_data <- read.csv(pathfile)
pathfile_2 <- '../data/HousingAssistanceRenters.csv'
renter_data <- read.csv(pathfile_2)
pathfile_3 <- '../data/owners_summary_state_groupby.csv'
state_incident_data <- read.csv(pathfile_3)
# calculate sum of each
x1 <- sum(owner_data$approvedBetween1And10000)
x2 <- sum(owner_data$approvedBetween10001And25000)
x3 <- sum(owner_data$approvedBetween25001AndMax)
jpeg(filename="figs/owners_pie_chart.jpg",width=480,height=480)
slices <- c(x1, x2, x3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Owners Approved Amounts")
dev.off()
y1 <- sum(renter_data$approvedBetween1And10000)
y2 <- sum(renter_data$approvedBetween10001And25000)
y3 <- sum(renter_data$approvedBetween25001AndMax)
jpeg(filename="figs/renters_pie_chart.jpg",width=480,height=480)
slices <- c(y1, y2, y3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Renters Approved Amounts")
dev.off()
slices <- c(x1, x2, x3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Owners Approved Amounts")
# create data quantiles
state_incident_data$percentile_damage = rank(state_incident_data$total_damage_sum)/nrow(state_incident_data)*100
state_incident_data$percentile_amt = rank(state_incident_data$total_approved_amount_sum)/nrow(state_incident_data)*100
# calculating empirical distribution of total damage/total approved amount based on state and incident type
empirical_dist <- function(df, incident, state, amount, damage){
data <- df %>%
filter(incidentType == incident, state == state, percentile_amt <= amount, percentile_damage <= damage)
if (dim(data)[1] == 0) {
print("No Data")
break
}
ecdf_func <- ecdf(data$total_damage_sum)
plot(ecdf_func, xlab='Damage', ylab="Approved Amount",
main="Empirical Cumulative Distribution Function Plot for Approved Amounts/Damage")
}
# create data quantiles
state_incident_data$percentile_damage = rank(state_incident_data$total_damage_sum)/nrow(state_incident_data)*100
state_incident_data$percentile_amt = rank(state_incident_data$total_approved_amount_sum)/nrow(state_incident_data)*100
# calculating empirical distribution of total damage/total approved amount based on state and incident type
empirical_dist <- function(df, incident, state, amount, damage){
data <- df %>%
filter(incidentType == incident, state == state, percentile_amt <= amount, percentile_damage <= damage)
if (dim(data)[1] == 0) {
print("No Data")
break
}
ecdf_func <- ecdf(data$total_damage_sum)
plot(ecdf_func, xlab='Damage', ylab="Approved Amount",
main="Empirical Cumulative Distribution Function Plot for Approved Amounts/Damage")
}
# create data quantiles
state_incident_data$percentile_damage = rank(state_incident_data$total_damage_sum)/nrow(state_incident_data)*100
state_incident_data$percentile_amt = rank(state_incident_data$total_approved_amount_sum)/nrow(state_incident_data)*100
# calculating empirical distribution of total damage/total approved amount based on state and incident type
empirical_dist <- function(df, incident, state, amount, damage){
data <- df %>%
filter(incidentType == incident, state == state, percentile_amt <= amount, percentile_damage <= damage)
if (dim(data)[1] == 0) {
print("No Data")
break
}
ecdf_func <- ecdf(data$total_damage_sum)
plot(ecdf_func, xlab='Damage', ylab="Approved Amount",
main="Empirical Cumulative Distribution Function Plot for Approved Amounts/Damage")
}
library(shiny)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
# install.packages('package') for each package listed.
#setwd('Desktop/GitHub/ads-fall2023-project2-group2/doc/')
library(dplyr)
library(stats)
library(ggplot2)
library(ggrepel)
library(udpipe)
library(plotly)
library(plyr)
pathfile <- '../data/HousingAssistanceOwners.csv'
owner_data <- read.csv(pathfile)
pathfile_2 <- '../data/HousingAssistanceRenters.csv'
renter_data <- read.csv(pathfile_2)
pathfile_3 <- '../data/owners_summary_state_groupby.csv'
state_incident_data <- read.csv(pathfile_3)
# calculate sum of each
x1 <- sum(owner_data$approvedBetween1And10000)
x2 <- sum(owner_data$approvedBetween10001And25000)
x3 <- sum(owner_data$approvedBetween25001AndMax)
jpeg(filename="figs/owners_pie_chart.jpg",width=480,height=480)
slices <- c(x1, x2, x3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Owners Approved Amounts")
dev.off()
y1 <- sum(renter_data$approvedBetween1And10000)
y2 <- sum(renter_data$approvedBetween10001And25000)
y3 <- sum(renter_data$approvedBetween25001AndMax)
jpeg(filename="figs/renters_pie_chart.jpg",width=480,height=480)
slices <- c(y1, y2, y3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Renters Approved Amounts")
dev.off()
slices <- c(x1, x2, x3)
lbls <- c("1-10000", "10001-25000", "25001-Max")
pie(slices, labels = lbls, col=rainbow(length(lbls)), main="Pie Chart for Owners Approved Amounts")
# create data quantiles
state_incident_data$percentile_damage = rank(state_incident_data$total_damage_sum)/nrow(state_incident_data)*100
state_incident_data$percentile_amt = rank(state_incident_data$total_approved_amount_sum)/nrow(state_incident_data)*100
# calculating empirical distribution of total damage/total approved amount based on state and incident type
empirical_dist <- function(df, incident, state, amount, damage){
data <- df %>%
filter(incidentType == incident, state == state, percentile_amt <= amount, percentile_damage <= damage)
if (dim(data)[1] == 0) {
print("No Data")
break
}
ecdf_func <- ecdf(data$total_damage_sum)
plot(ecdf_func, xlab='Damage', ylab="Approved Amount",
main="Empirical Cumulative Distribution Function Plot for Approved Amounts/Damage")
}
ecdf_func
# create data quantiles
state_incident_data$percentile_damage = rank(state_incident_data$total_damage_sum)/nrow(state_incident_data)*100
state_incident_data$percentile_amt = rank(state_incident_data$total_approved_amount_sum)/nrow(state_incident_data)*100
# calculating empirical distribution of total damage/total approved amount based on state and incident type
empirical_dist <- function(df, incident, state, amount, damage){
data <- df %>%
filter(incidentType == incident, state == state, percentile_amt <= amount, percentile_damage <= damage)
if (dim(data)[1] == 0) {
print("No Data")
break
}
ecdf_func <- ecdf(data$total_damage_sum)
plot(ecdf_func, xlab='Damage', ylab="Approved Amount",
main="Empirical Cumulative Distribution Function Plot for Approved Amounts/Damage")
}
ecdf_func
ecdf(data$total_damage_sum)
empirical_dist
merged_data
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(sf)
# Frequency
disaster_declaration <- read.csv("data/FemaWebDisasterDeclarations.csv")
regions <- read.csv("data/US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_owner <- read.csv("data/HousingAssistanceOwners.csv")
disaster_renter <- read.csv("data/HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
merged_data
state_boundaries
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(sf)
disaster_declaration <- read.csv("data/FemaWebDisasterDeclarations.csv")
regions <- read.csv("data/US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_owner <- read.csv("data/HousingAssistanceOwners.csv")
disaster_renter <- read.csv("data/HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
library(dplyr)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(shiny)
library(lubridate)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(DT)
library(data.table)
library(leaflet)
library(sf)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=dplyr::n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
n()
help(n)
library(dplyr)
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(sf)
library(dplyr)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=dplyr::n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
mutate(Frequency=n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(sf)
disaster_declaration <- read.csv("data/FemaWebDisasterDeclarations.csv")
regions <- read.csv("data/US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_owner <- read.csv("data/HousingAssistanceOwners.csv")
disaster_renter <- read.csv("data/HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%
group_by(year, incidentType)%>%
summarize(Frequency=dplyr::n())%>%
arrange(year, desc(Frequency))%>%
slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#Most prevalent disaster by state
top_disaster_state <- disaster_declaration%>%group_by(stateName, incidentType)%>%summarize(Frequency=n())%>%arrange(stateName, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
state_boundaries <- read_sf("data/state_boundaries/state_boundaries/cb_2019_us_state_5m.shp")
state_boundaries <- st_transform(state_boundaries, crs = "+proj=longlat +datum=WGS84")
merged_data <- merge(state_boundaries, disaster_declaration, by.x = "NAME", by.y = "stateName", all.x = FALSE)
disaster_freq_state <- disaster_declaration%>%group_by(stateName)%>%summarize(Frequency=n())
write.csv(merged_data)
write.csv(merged_data, 'merged_data.csv')
View(merged_data)
library(shiny)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
cdf <- ecdf(x)
# empirical plot
rcdf <- function(x){
cdf <- ecdf(x)
y1 <- cdf(x)
y <- unique(y1)
# xrcdf <- 1-y  ##  to get reverse cdf
xrcdf <- y    ##  to get cdf
}
ggplot(data,aes = (x = edf(total_damage_sum)))
ggplot(data,aes = (x = ecdf(total_damage_sum)))
ggplot(data,aes = (x = ecdf(total_damage_sum)))
plot(ecdf(data$total_damage_sum))
plot(ecdf(data$total_damage_sum[which(data$total_damage_sum>10^8)]))
plot(ecdf(data$total_damage_sum))
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
help(siderbarMenu)
shinyAppDir('D:/rscript')
help(plot_ly)
help("add_trace")
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
library(shiny)
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
library(shiny)
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
shinyAppDir('D:/rscript/app')
library(shiny)
shinyAppDir('D:/rscript/app')
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
getwd
getwd()
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
setwd("D:/rscript/app")
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
isaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
regions <- read.csv("../data/US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_owner <- read.csv("../data/HousingAssistanceOwners.csv")
disaster_renter <- read.csv("../data/HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#Most prevalent disaster by state
top_disaster_state <- disaster_declaration%>%group_by(stateName, incidentType)%>%summarize(Frequency=n())%>%arrange(stateName, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_freq_state <- disaster_declaration%>%group_by(stateName,stateCode)%>%summarize(Frequency=n())
shinyAppDir('"D:/rscript/app"')
shinyAppDir("D:/rscript/app")
disaster_declaration <- read.csv("../data/FemaWebDisasterDeclarations.csv")
regions <- read.csv("../data/US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_owner <- read.csv("../data/HousingAssistanceOwners.csv")
disaster_renter <- read.csv("../data/HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#Most prevalent disaster by state
top_disaster_state <- disaster_declaration%>%group_by(stateName, incidentType)%>%summarize(Frequency=n())%>%arrange(stateName, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_freq_state <- disaster_declaration%>%group_by(stateName,stateCode)%>%summarize(Frequency=n())
shinyAppDir("D:/rscript/app")
